pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
print("loaded package")
runWaterfall()
print("running app")
library(rsconnect)
rsconnect::deployApp()
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
runWaterfall()
rsconnect::deployApp()
library(qHTSWaterfall)
options(shiny.autoload.r = FALSE)
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
print("loaded package")
runWaterfall()
print("running app")
library(qHTSWaterfall)
rsconnect::deployApp()
help(runApp)
library(qHTSWaterfall)
options(shiny.autoload.r = FALSE)
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
print("loaded package")
runWaterfall()
print("running app")
q
library(qHTSWaterfall)
options(shiny.autoload.r = FALSE)
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
print("loaded package")
runWaterfall()
print("running app")
library(qHTSWaterfall)
rsconnect::deployApp()
options(shiny.autoload.r = FALSE)
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
print("loaded package")
runWaterfall()
print("running app")
options(shiny.autoload.r = FALSE)
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
print("loaded package")
runWaterfall()
print("running app")
deployApp()
rsconnect::deployApp()
library(qHTSWaterfall)
rsconnect::deployApp()
packageVersion("rsconnect")
options(shiny.autoload.r = FALSE)
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
print("loaded package")
runWaterfall()
print("running app")
library(qHTSWaterfall)
options(shiny.autoload.r = FALSE)
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
print("loaded package")
runWaterfall()
print("running app")
library(qHTSWaterfall)
options(shiny.autoload.r = FALSE)
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
print("loaded package")
runWaterfall()
print("running app")
options(shiny.autoload.r = FALSE)
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
print("loaded package")
runWaterfall()
print("running app")
options(shiny.autoload.r = FALSE)
pkgload::load_all(export_all = FALSE, helpers = FALSE, attach_testthat = FALSE)
print("loaded package")
runWaterfall()
print("running app")
library(qHTSWaterfall)
packageVersion("rlang")
packageVersion("utils")
packageVersion("stringr")
packageVersion("dplyr")
packageVersion("tidyr")
packageVersion("shiny")
packageVersion("colourpicker")
packageVersion("shinyjs")
packageVersion("shinydashboard")
packageVersion("plotly")
packageVersion("shinycssloaders")
packageVersion("pkgload")
shiny::runApp('inst/shinyApp')
help(install.packages)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
shiny::runApp('inst/shinyApp')
shiny::runApp('R')
library(rsconnect)
deployApp()
library(qHTSWaterfall)
library(usethis)
usethis::use_package('openxlxs')
usethis::use_package('openxlxs')
usethis::use_package('openxlsx')
usethis::use_package('tools')
library(tools)
library(openxlsx)
as.numeric(5)
5
a <- c(5)
a
as.numeric(a)
library(qHTSWaterfall)
shiny::runApp('inst/shinyApp')
file <- "C:/Tools/git_projects/qhtsWaterfall/inst/extdata/Generic_qHTS_Format_Example.xlsx"
filePath <- file
formatConcHeader <- read.xlsx(filePath, sheet=1, rows = as.numeric(c(1)))
dim(formatConcHeader)
formatConcHeader <- read.xlsx(filePath, sheet=1, rows = c(1))
dim(formatConcHeader)
formatConcHeader <- read.xlsx(filePath, sheet=1, header=F, rows = as.numeric(c(1)))
formatConcHeader <- read.xlsx(filePath, sheet=1, header=F, rows = as.numeric(c(1,2)))
formatConcHeader <- read.xlsx(filePath, sheet=1, rows = as.numeric(c(1,2)))
dim(formatConcHeader)
formatConcHeader <- read.xlsx(filePath, sheet=1, colNames=F, rows = as.numeric(c(1)))
dim(formatConcHeader)
formatConcHeader
formatConcHeader <- read.xlsx(filePath, sheet=1, colNames=F, rows = as.numeric(c(1)))
formatConcHeader <- formatConcHeader[1,]
formatConcHeader
unlist(formatConcHeader)
formatConcHeader <- read.xlsx(filePath, sheet=1, colNames=F, rows = as.numeric(c(1)))
formatConcHeader <- as.character(formatConcHeader[1,])
formatConcHeader
library(qHTSWaterfall)
runApp('inst/shinyApp')
tolower("HI")
toLower("HI")
library(qHTSWaterfall)
runApp('inst/shinyApp')
fileExt <- 'CSV'
tolower(fileExt) == 'csv'
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
a <- c("a", "b", "c")
b <- "c"
b %in% a
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
a
typeof(a)
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
library(qHTSWaterfall)
shiny::runApp('inst/shinyApp')
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
runApp()
runApp()
runApp()
runApp()
library(qHTSWaterfall)
runApp()
library(qHTSWaterfall)
shiny::runApp('inst/shinyApp')
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
source("C:/Tools/git_projects/qhtsWaterfall/R/3d_qHTS_pubchem.R", echo=TRUE)
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
library(rsconnect)
rsconnect::deployApp()
shiny::runApp('inst/shinyApp')
runApp('inst/shinyApp')
rsconnect::deployApp()
help(rsconnect::deployApp())
help('deployApp')'
;
'
help('deployApp')
rsconnect::deployApp(appName="qHTSWaterfall", appTitle="qHTSWaterfall", forceUpdate=T)
getwd()
rsconnect::deployApp(appName="qHTSWaterfall", appTitle="qHTSWaterfall", forceUpdate=T, appDir="/inst/shinyApp/")
rsconnect::deployApp(appName="qHTSWaterfall", appTitle="qHTSWaterfall", forceUpdate=T, appDir=paste0(getwd(), "/inst/shinyApp/"))
library(qHTSWaterfall)
# data file
inputFile <- system.file("extdata", "NCATS_CMT1A_PMP22_Follow_Up.csv", package="qHTSWaterfall")
# concentrations
logConc <- c(
-9.011761791,
-8.534640544,
-8.057519287,
-7.580398031,
-7.103276777,
-6.626155522,
-6.149034267,
-5.671913012,
-5.194791758,
-4.717670503,
-4.240549248
)
responseAxisConfig = list(min=-450, max=500, tickSizeVal=100, firstTick=-500)
concAxisConfig = list(min=-9.2, max=-3.9, tickSizeVal=1.0, firstTick=-4)
planeColors = list(basePlaneColor="#b8b6b6", rightPlaneColor="#999494", leftPlaneColor="#6e6868")
# plot
pdf(file = "/Users/braistedjc/Desktop/My_Plot.pdf",   # The directory you want to save the file in
width = 4, # The width of the plot in inches
height = 4) # The height of the plot in inches
qHTSWaterfall::plotWaterfall(
inputFile,
activityReadouts = c("nluc","fluc"),
pointColors = c("royalblue3"),
curveColors = c("royalblue3"),
inactiveColor = "gray",
pointSize = 1.0,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(1.5,1,3),
lineWeight = 1.5,
returnPlotObject = F,
fileFormat = 'ncats_qhts',
planeColors = planeColors,
showCurveNumberLabels = T,
concAxisConfig = concAxisConfig,
responseAxisConfig = responseAxisConfig
)
shiny::runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
source("C:/Tools/git_projects/qhtsWaterfall/R/3d_qHTS_pubchem.R", echo=TRUE)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
runApp('inst/shinyApp')
library(qHTSWaterfall)
library(knitr)
library(rgl)
rgl::setupKnitr(autoprint = T)
knitr::opts_chunk$set(
collapse = TRUE,
echo = TRUE,
fig.width = 8, fig.height = 8, fig.align = 'left',
comment = "#>"
)
library(qHTSWaterfall)
# Specify a comma separateed input file. In this example, one is included as
# part of the qHTSPackage. If using your own file, provide the file path here.
# This example features active compounds from this study:
# Martinez NJ, Braisted JC, Dranchak PK, Moran JJ, Larson H, Queme B, Pak E, Dutra A, Rai G,
# Cheng KC, Svaren J, Inglese J. Genome-Edited Coincidence and PMP22-HiBiT Fusion Reporter Cell
# Lines Enable an Artifact-Suppressive Quantitative High-Throughput Screening Strategy for PMP22
# Gene-Dosage Disorder Drug Discovery. ACS Pharmacol Transl Sci. 2021 Jun 10;4(4):1422-1436.
# doi: 10.1021/acsptsci.1c00110. PMID: 34423274; PMCID: PMC8369676.
inputFile <- system.file("extdata", "NCATS_CMT1A_PMP22_Follow_Up.csv", package="qHTSWaterfall")
# Non-PubChemm input requires a list of log-molar concentrations, from low to high #concentration.
logConc <- c(
-9.011761791,
-8.534640544,
-8.057519287,
-7.580398031,
-7.103276777,
-6.626155522,
-6.149034267,
-5.671913012,
-5.194791758,
-4.717670503,
-4.240549248
)
# the main method call with parameters. Use 'help(plotWaterfall' for parameter descriptions.)
# Note: The displayed resulting plot shown in this vignette page is a low resolution static image.
# The method will return a high resolution 3D rendering (from the rgl package) that can be resized
# and rotated.
qHTSWaterfall::plotWaterfall(
inputFile,
activityReadouts = c("fluc", "nluc"),
logMolarConcVector = logConc,
pointColors = c("darkgreen", "royalblue3"),
curveColors = c("darkgreen", "royalblue3"),
inactiveColor = "gray",
pointSize = 3,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(2,2,4),
returnPlotObject = F
)
help("plotWaterfall")
library(qHTSWaterfall)
# Specify a comma separateed input file. In this example, one is included as
# part of the qHTSPackage. If using your own file, provide the file path here.
# This example features active compounds from this study:
# Martinez NJ, Braisted JC, Dranchak PK, Moran JJ, Larson H, Queme B, Pak E, Dutra A, Rai G,
# Cheng KC, Svaren J, Inglese J. Genome-Edited Coincidence and PMP22-HiBiT Fusion Reporter Cell
# Lines Enable an Artifact-Suppressive Quantitative High-Throughput Screening Strategy for PMP22
# Gene-Dosage Disorder Drug Discovery. ACS Pharmacol Transl Sci. 2021 Jun 10;4(4):1422-1436.
# doi: 10.1021/acsptsci.1c00110. PMID: 34423274; PMCID: PMC8369676.
inputFile <- system.file("extdata", "NCATS_CMT1A_PMP22_Follow_Up.csv", package="qHTSWaterfall")
# Non-PubChemm input requires a list of log-molar concentrations, from low to high #concentration.
logConc <- c(
-9.011761791,
-8.534640544,
-8.057519287,
-7.580398031,
-7.103276777,
-6.626155522,
-6.149034267,
-5.671913012,
-5.194791758,
-4.717670503,
-4.240549248
)
# the main method call with parameters. Use 'help(plotWaterfall' for parameter descriptions.)
# Note: The displayed resulting plot shown in this vignette page is a low resolution static image.
# The method will return a high resolution 3D rendering (from the rgl package) that can be resized
# and rotated.
qHTSWaterfall::plotWaterfall(
inputFile,
fileFormat = "ncats_qhts",
activityReadouts = c("fluc", "nluc"),
logMolarConcVector = logConc,
pointColors = c("darkgreen", "royalblue3"),
curveColors = c("darkgreen", "royalblue3"),
inactiveColor = "gray",
pointSize = 3,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(2,2,4),
returnPlotObject = F
)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(knitr)
knitr::opts_chunk$set(
collapse = TRUE,
echo = TRUE,
fig.width = 8, fig.height = 8, fig.align = 'left',
comment = "#>"
)
library(qHTSWaterfall)
# Specify a comma separateed input file. In this example, one is included as
# part of the qHTSPackage. If using your own file, provide the file path here.
# This example features active compounds from this study:
# Martinez NJ, Braisted JC, Dranchak PK, Moran JJ, Larson H, Queme B, Pak E, Dutra A, Rai G,
# Cheng KC, Svaren J, Inglese J. Genome-Edited Coincidence and PMP22-HiBiT Fusion Reporter Cell
# Lines Enable an Artifact-Suppressive Quantitative High-Throughput Screening Strategy for PMP22
# Gene-Dosage Disorder Drug Discovery. ACS Pharmacol Transl Sci. 2021 Jun 10;4(4):1422-1436.
# doi: 10.1021/acsptsci.1c00110. PMID: 34423274; PMCID: PMC8369676.
inputFile <- system.file("extdata", "NCATS_CMT1A_PMP22_Follow_Up.csv", package="qHTSWaterfall")
# Non-PubChemm input requires a list of log-molar concentrations, from low to high #concentration.
logConc <- c(
-9.011761791,
-8.534640544,
-8.057519287,
-7.580398031,
-7.103276777,
-6.626155522,
-6.149034267,
-5.671913012,
-5.194791758,
-4.717670503,
-4.240549248
)
# the main method call with parameters. Use 'help(plotWaterfall' for parameter descriptions.)
# Note: The displayed resulting plot shown in this vignette page is a low resolution static image.
# The method will return a high resolution 3D rendering (from the rgl package) that can be resized
# and rotated.
qHTSWaterfall::plotWaterfall(
inputFile,
fileFormat = "ncats_qhts",
activityReadouts = c("fluc", "nluc"),
logMolarConcVector = logConc,
pointColors = c("darkgreen", "royalblue3"),
curveColors = c("darkgreen", "royalblue3"),
inactiveColor = "gray",
pointSize = 3,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(2,2,4),
returnPlotObject = F
)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(qHTSWaterfall)
library(knitr)
knitr::opts_chunk$set(
collapse = TRUE,
echo = TRUE,
fig.width = 8, fig.height = 8, fig.align = 'left',
comment = "#>"
)
library(qHTSWaterfall)
# Specify a comma separateed input file. In this example, one is included as
# part of the qHTSPackage. If using your own file, provide the file path here.
# This example features active compounds from this study:
# Martinez NJ, Braisted JC, Dranchak PK, Moran JJ, Larson H, Queme B, Pak E, Dutra A, Rai G,
# Cheng KC, Svaren J, Inglese J. Genome-Edited Coincidence and PMP22-HiBiT Fusion Reporter Cell
# Lines Enable an Artifact-Suppressive Quantitative High-Throughput Screening Strategy for PMP22
# Gene-Dosage Disorder Drug Discovery. ACS Pharmacol Transl Sci. 2021 Jun 10;4(4):1422-1436.
# doi: 10.1021/acsptsci.1c00110. PMID: 34423274; PMCID: PMC8369676.
inputFile <- system.file("extdata", "NCATS_CMT1A_PMP22_Follow_Up.csv", package="qHTSWaterfall")
# Non-PubChemm input requires a list of log-molar concentrations, from low to high #concentration.
logConc <- c(
-9.011761791,
-8.534640544,
-8.057519287,
-7.580398031,
-7.103276777,
-6.626155522,
-6.149034267,
-5.671913012,
-5.194791758,
-4.717670503,
-4.240549248
)
# the main method call with parameters. Use 'help(plotWaterfall' for parameter descriptions.)
# Note: The displayed resulting plot shown in this vignette page is a low resolution static image.
# The method will return a high resolution 3D rendering that can be resized
# and rotated.
qHTSWaterfall::plotWaterfall(
inputFile,
fileFormat = "ncats_qhts",
activityReadouts = c("fluc", "nluc"),
logMolarConcVector = logConc,
pointColors = c("darkgreen", "royalblue3"),
curveColors = c("darkgreen", "royalblue3"),
inactiveColor = "gray",
pointSize = 3,
alpha = 1,
plotInactivePoints = F,
curveResolution = 250,
plotAspectRatio = c(2,2,4),
returnPlotObject = F
)
library(qHTSWaterfall)
help("setNames")
usethis::use_package("stats")
library(qHTSWaterfall)
library(qHTSWaterfall)
runApp('inst/shinyApp')
library(qHTSWaterfall)
runApp('inst/shinyApp')
install.packages("C:/Tools/git_projects/qHTSWaterfall_1.0.2.tar.gz", type='source', repo=NULL)
install.packages("C:/Tools/git_projects/qHTSWaterfall_1.0.2.tar.gz", type='source', repo=NULL)
library(qHTSWaterfall)
qHTSWaterfall::runQHTSWaterfallApp()
qHTSWaterfall::runWaterfall()
help(useShinyjs)
library(qHTSWaterfall)
